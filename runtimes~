 double ti = 0;
 double tf = 20;
 double cfl = 0.2;
 double dumpPeriod = 500;
 std::string filenameSpec = "Results/Sim4/"; // main data storage directory
 std::string solver = "sor"; 


SOR 33x33 re 100
real	0m7.678s
user	0m7.668s
sys	0m0.016s


ADI 33x33 re 100
real	0m11.115s
user	0m11.116s
sys	0m0.008s



SOR 65x65 re 100
real	1m17.778s
user	1m17.771s
sys	0m0.060s


ADI 65x65 re 100
real	3m37.379s
user	3m37.548s
sys	0m0.024s
\\\\\\\\\\\\\\\\\\\\\\

//compare runtime
 double pi = atan(1)*4;

 // solving on 3 grids
 int    gridS[3]  = {33,65,129};
 int    tolExp[3] = {-7,-8,-9};
 double omegaS[3]  = {1.82,1.91,1.95}; 


 //solving for 2 different reynolds numbers
 double reynoldS[2] = {100,1000};

 //lid velocity
 double vLbc = 0;
 double vRbc = 0;
 double uTbc = 1;
 double uBbc = 0;
 double uRef = 1;

 //dims
 double l    = 1;
 double w    = 1;
 double lRef = l;


 double ti = 0;
 double tf = 1;
 double cfl = 0.1;
 double dumpPeriod = 20;
 std::string filenameSpec = "Results/Sim4/"; // main data storage directory
 std::string solver = "adi"; 
 std::string filename;
 std::ostringstream os;

 double L, W, xkl, ykl, psiManu, rhs, psiInitial,zetaInitial,omega,tol,reynolds;
 int N, iterations;
 Grid grid;

 for (int r = 0; r <=0; r++)
 {
  reynolds = reynoldS[r];

  for (int i = 2; i <= 2; i++)
  {

   N     = gridS[i];
   tol   = pow(10,tolExp[i]);
   omega = omegaS[i];

  // place in correct folder
  os.clear();
  os.str("");
  os << filenameSpec << "Re" << reynolds << "/N" << N << "/" ;
  filename = os.str();

   grid.set_grid(N,N,l,w,lRef,uRef);
   grid.set_boundary_velocities(vLbc,vRbc,uTbc,uBbc);

   L  = grid.get("length");
   W  = grid.get("width");  

   // set IC, psiManu and rhs(psiManu)
   for (int l = 0 ; l <= N - 1 ; l++)
   { 
    for (int k = 0 ; k <= N - 1 ; k++)	
    {
     xkl     = grid.get("x",k,l);
     ykl     = grid.get("y",k,l);

     zetaInitial = 0;
     grid.set("zeta",k,l,zetaInitial);

     psiInitial = 0;
     grid.set("psi",k,l,psiInitial);
    } 
   }// end of iteration through nodes

   // set BC
   grid.set_psi_bc("diri",0.0,0.0,0.0,0.0);
   grid.set_zeta_bc();
   grid.solve(ti,tf,reynolds,cfl,tol,omega,dumpPeriod,solver,filename);
 

first 0.1 seconds
SOR
real	0m19.207s
user	0m19.216s
sys	0m0.008s

ADI
real	5m5.776s
user	5m5.944s
sys	0m0.096s

ADI
real	0m9.383s
user	0m9.375s
sys	0m0.016s

SOR
real	0m1.497s
user	0m1.481s
sys	0m0.016s


first 0.5 seconds

SOR
real	0m0.591s
user	0m0.582s
sys	0m0.008s

ADI
real	0m1.404s
user	0m1.397s
sys	0m0.008s





